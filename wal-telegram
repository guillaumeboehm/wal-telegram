#!/usr/bin/env bash
#
# A script to create Telegram palettes that use colors generated by pywal/wal
# or from a different file containing the hex colors (see the README.md for the
# format of the file).

# Help function called by the --help|-h parameter.

set -E
trap '[ "$?" -ne 77 ] || exit 77' ERR

help() {
  cat <<EOF
A script to create Telegram palettes that use colors generated by pywal/wal
or from a different file containing the hex colors (see the README.md for the
format of the file).

Usage: 
  $0 -w | --wal [-t|--tiled] [-b|--background=<path_to_background_image>] [-d|--destination=<destination_path>] [-g|--gaussian-blur=<blur_argument>] [-r|--restart]
  $0 -p | --palette=</path/to/palette> [-t|--tiled] [-b|--background=<path_to_background_image>] [-d|--destination=<destination_path>] [-g|--gaussian-blur=<blur_argument>] [-r|--restart]
  $0 -h | --help

Options:
  -h                  Show command usage.
  --help              Show this help screen.
  -w --wal            Generate the color palette using the colors generated
                      by pywal/wal (Default).
  -p --palette        Use colors from an sh file to generate the color palette.
  -t --tiled          Use a unified color background instead of an image.
  -b --background     Use a specific image as background.
  -d --destination    Specify a destination folder for the generated palette.
                      (Default: ~/.cache/wal-telegram)
  -g --gaussian-blur  Blur the background image, takes a blur argument.
                      see https://legacy.imagemagick.org/Usage/blur/#blur_args.
                      -g takes no argument and uses the default value.
                      (Default: 0x16)
  -r --restart        Restart the telegram app after generation.
EOF
}
usage() {
  cat <<EOF
Usage:
  $0 --wal [--tiled] [--background=<path_to_background_image>] [--destination=<destination_path>] [-g|--gaussian-blur=<blur_argument (default: 0x16)>] [-r|--restart]
  $0 --palette=<path_to_sh_file> [--tiled] [--background=<path_to_background_image>] [--destination=<destination_path>] [-g|--gaussian-blur=<blur_argument (default: 0x16)>] [-r|--restart]
EOF
}
exit_abnormal(){
  usage
  exit 1
}

script_dir=$(readlink -f ${0} | sed "s#/$(basename ${0})##")

# shellcheck source=/dev/null
command -v zip > /dev/null || (printf '%b\n' "\\e[1;31m::\\e[0m \\e[1;37mA zipping utility is needed for this script, consider installing zip or gzip\\e[0m" && exit 77)

options=$(getopt -o hwtp:b:d:gr --long help,wal,tiled,palette:,background:,destination:,gaussian-blur:,restart -- "$@")
if [ $? != 0 ] ; then exit_abnormal; fi
eval set -- "$options"

while true; do
  case "$1" in
    -h) usage; exit 0 ;;
    --help) help; exit 0 ;;
    -w | --wal )
      if [[ "$mode" == 'palette' ]]; then
        printf '%b\n\n' "\\e[1;31m::\\e[0m \\e[1;37mCannot use wal and palette together.\\e[0m"
        exit_abnormal
      fi
      if [[ ! -d "${XDG_CACHE_HOME:-${HOME}/.cache}/wal" ]]; then
        printf '%b\n\n' "\\e[1;31m::\\e[0m \\e[1;37mWal must be run before running wal-telegram.\\e[0m"
        exit_abnormal
      fi
      mode='wal'
      shift ;;
    -t | --tiled )
      bg_mode="tiled"
      shift ;;
    -p | --palette )
      if [[ "$mode" == 'wal' ]]; then
        printf '%b\n\n' "\\e[1;31m::\\e[0m \\e[1;37mCannot use wal and palette together.\\e[0m"
        exit_abnormal
      fi
      if [[ ! -f "$2" ]]; then
        printf '%b\n\n' "\\e[1;31m::\\e[0m \\e[1;37mPalette file '$2' could not be found.\\e[0m"
        exit_abnormal
      fi
      mode='palette'
      palette_file=$2
      shift 2 ;;
    -b | --background )
      if [[ ! -f "$2" ]]; then
        printf '%b\n\n' "\\e[1;31m::\\e[0m \\e[1;37mBackground file '$2' could not be found.\\e[0m"
        exit_abnormal
      fi
      bg="$2"
      shift 2 ;;
    -d | --destination )
      if (mkdir -p "$2" 2> /dev/null); then
        dest="$2"
      else
        printf '%b\n\n' "\\e[1;31m::\\e[0m \\e[1;37mCould not create '$2' verify the permissions in it's parent directory and retry.\\e[0m"
        exit_abnormal
      fi
      shift 2 ;;
    -g)
      if [ -n "$blur" ]; then 
        printf '%b\n\n' "\\e[1;31m::\\e[0m \\e[1;37mDo not set -g and --gaussian-blur together.\\e[0m"
        exit_abnormal
      fi
      blur="0x16" 
      shift ;;
    --gaussian-blur )
      if [ -n "$blur" ]; then 
        printf '%b\n\n' "\\e[1;31m::\\e[0m \\e[1;37mDo not set -g and --gaussian-blur together.\\e[0m"
        exit_abnormal
      fi
      if [ -z "$2" ] || [ "$(expr "$2" : '^[[:digit:]]\+x[[:digit:]]\+$')" -eq 0 ]; then
        printf '%b\n\n' "\\e[1;31m::\\e[0m \\e[1;37mBlur option not recognized, see https://legacy.imagemagick.org/Usage/blur/#blur_args for reference.\\e[0m"
        exit_abnormal
      fi
      blur="$2"
      shift 2 ;;
    -r | --restart )
      restart_on_gen=true
      shift ;;
    -- ) shift; break ;;
    * ) break ;;
  esac
done
# default values
[ -z "$mode" ] && mode='wal'
[ -z "$bg_mode" ] && bg_mode='background'
[ -z "$bg" ] && bg='wal'

# source this here in case wal is not an option
if [[ "$mode" == 'wal' ]]; then
  . "${XDG_CACHE_HOME:-${HOME}/.cache}/wal/colors.sh"
else
  . "$palette_file"
fi

# Set colors from 9 to 16 for pywal16
if [ -z "$color8" ]; then color8="$color0"; fi
if [ -z "$color9" ]; then color9="$color1"; fi
if [ -z "$color10" ]; then color10="$color2"; fi
if [ -z "$color11" ]; then color11="$color3"; fi
if [ -z "$color12" ]; then color12="$color4"; fi
if [ -z "$color13" ]; then color13="$color5"; fi
if [ -z "$color14" ]; then color14="$color6"; fi
if [ -z "$color15" ]; then color15="$color7"; fi

if [[ "$bg_mode" == 'tiled' ]] && [[ "$bg" != 'wal' ]]; then
  printf '%b\n' "\\e[1;31m::\\e[0m \\e[1;37mBackground option while using tiled mode is useless.\\e[0m"
fi

# Prepare the conditions for the other functions.
prepare() {
  pre="/tmp/wal-telegram/$(date +%s)"
  [ -z "$dest" ] && dest="${XDG_CACHE_HOME:-${HOME}/.cache}/wal-telegram"
  mkdir -p "$pre"
  mkdir -p "$dest"
  # rm -f "${dest}/${mode}.tdesktop-theme"

  if [[ "$bg" == "wal" ]]; then # if no background is specified
    if [[ "$mode" == wal ]] && [[ "$bg_mode" == "background" ]]; then
      # wal mode without tiled
      bg_path="$(<"${XDG_CACHE_HOME:-${HOME}/.cache}/wal/wal")"
      bg_ext="${bg_path##*.}"
      cp "$bg_path" "${pre}/background.${bg_ext}"
    elif [[ "$mode" == "palette" ]] && [[ "$bg_mode" == "background" ]]; then
      if [[ -f "${HOME}/.fehbg" ]]; then
        bg_path="$(tail -n1 "${HOME}/.fehbg" \
                   | sed "s/[^']*//" \
                   | awk '{print $1}' \
                   | sed "s/'//g")"
        bg_ext="${bg_path##*.}"
        if [[ -f "$bg_path" ]]; then
          cp "$bg_path" "${pre}/background.${bg_ext}"
        fi
      else # if .fehbg exists
        printf '%b\n' "\\e[1;31m::\\e[0m \\e[1;37m~/.fehbg not found, falling back to tiled background.\\e[0m"
        bg="tiled"
      fi # if .fehbg exists
    fi # elif mode == palette
  else # if bg == wal
    bg="$(readlink -f "$bg")"
    bg_ext="${bg##*.}"
    cp "$bg" "${pre}/background.${bg_ext}"
  fi # if bg == wal
}

create_colors() {
    colors=(0 1 2 3 4 5 7 8 9 10 11 12 13 14 15)
    divisions=(10 20 30 40 50 60 70 80 90)
    alphas=(00 11 22 33 44 55 66 77 88 99 aa bb cc dd ee)

    for i in "${colors[@]}"; do
        color="color${i}"
        c_rgb_12d="$(( 0x"${!color:1:2}" ))"
        c_rgb_34d="$(( 0x"${!color:3:2}" ))"
        c_rgb_56d="$(( 0x"${!color:5:2}" ))"

        for division in "${divisions[@]}"; do
            # Lighter
            c_r=$(( c_rgb_12d + "$((c_rgb_12d * (division / 10) / 10))" ))
            c_g=$(( c_rgb_34d + "$((c_rgb_34d * (division / 10) / 10))" ))
            c_b=$(( c_rgb_56d + "$((c_rgb_56d * (division / 10) / 10))" ))
            [[ "${c_r}" -ge 255 ]] && c_r=255
            [[ "${c_g}" -ge 255 ]] && c_g=255
            [[ "${c_b}" -ge 255 ]] && c_b=255
            printf -v c_hex_r '%x' "$c_r"
            printf -v c_hex_g '%x' "$c_g"
            printf -v c_hex_b '%x' "$c_b"
            [[ "${#c_hex_r}" -eq 1 ]] && c_hex_r="0${c_hex_r}"
            [[ "${#c_hex_g}" -eq 1 ]] && c_hex_g="0${c_hex_g}"
            [[ "${#c_hex_b}" -eq 1 ]] && c_hex_b="0${c_hex_b}"
            c_hex="#${c_hex_r}${c_hex_g}${c_hex_b}"
            declare -g "color${i}_lighter_${division}=$c_hex"

            # Darker
            c_r=$(( c_rgb_12d - "$((c_rgb_12d * (division / 10) / 10))" ))
            c_g=$(( c_rgb_34d - "$((c_rgb_34d * (division / 10) / 10))" ))
            c_b=$(( c_rgb_56d - "$((c_rgb_56d * (division / 10) / 10))" ))
            printf -v c_hex_r '%x' "$c_r"
            printf -v c_hex_g '%x' "$c_g"
            printf -v c_hex_b '%x' "$c_b"
            [[ "${#c_hex_r}" -eq 1 ]] && c_hex_r="0${c_hex_r}"
            [[ "${#c_hex_g}" -eq 1 ]] && c_hex_g="0${c_hex_g}"
            [[ "${#c_hex_b}" -eq 1 ]] && c_hex_b="0${c_hex_b}"
            c_hex="#${c_hex_r}${c_hex_g}${c_hex_b}"
            declare -g "color${i}_darker_${division}=$c_hex"
        done
    done

    for i in "${colors[@]}"; do
        echo "color$i: $(eval "echo \$color${i}");"

        echo "// Lighter and darker variants of the color."
        for division in "${divisions[@]}"; do
            echo "colorLighter${i}_${division}: $(eval "echo \$color${i}_lighter_${division}");"
            echo "colorDarker${i}_${division}: $(eval "echo \$color${i}_darker_${division}");"
        done

        echo "// Alpha colors."
        for alpha in "${alphas[@]}"; do
            echo "colorAlpha${i}_${alpha}: $(eval "echo \${color${i}}${alpha}");"
        done
        echo ""
    done
}

# Create colors.tdesktop-palette using the colors generated by create_colors()
# and the colors.wt-constants file.
create_palette() {

    create_colors > "${pre}/colors.tdesktop-theme"

    const="$(<"$script_dir/colors.wt-constants")"
    printf '%s' "$const" >> "${pre}/colors.tdesktop-theme"
    cd "${pre}" || exit 1;

    if [[ -z $bg_ext ]]; then bg_ext="jpg"; fi

    if [[ -n $blur ]]; then blur="-blur $blur"; fi

    if [[ "$bg_mode" = "tiled" ]]; then
        convert -size 256x256 "xc:$color0" tiled.jpg;
    elif [[ "$bg_mode" = "background" ]]; then
        img_size=$(magick identify -format "%w" "${bg_mode}.${bg_ext}")
        screen_size=$(xrandr | grep -P '(?<=connected)' | grep -oP '\d+x\d+\+\d+\+\d+' | sed 's/x/+/g' | awk -F '+' '{print $1}' | sort -ur | head -n 1)
        # shellcheck disable=SC2086
        convert ${bg_mode}.${bg_ext} $blur -resize $(( img_size > screen_size ? img_size : screen_size )) ${bg_mode}_tmp.jpg

        # Try to get the image to a nice size
        filesize=$(magick identify -format "%B" "${bg_mode}_tmp.jpg")
        quality=$(magick identify -format "%Q" "${bg_mode}.${bg_ext}")

        while [ "$filesize" -ge 1000000 ]; do
            quality=$(( quality - 5 ))
            convert "${bg_mode}.${bg_ext}" $blur -resize "$(( img_size > screen_size ? img_size : screen_size ))" -quality "$quality" "${bg_mode}_tmp.jpg"
            filesize=$(magick identify -format "%B" "${bg_mode}_tmp.jpg")
        done

        mv "${bg_mode}_tmp.jpg" "${bg_mode}.jpg"
    fi

    zip -q "${mode}.tdesktop-theme" colors.tdesktop-theme "${bg_mode}.jpg"

    cp "${mode}.tdesktop-theme" "$dest"

    [ -n "$restart_on_gen" ] && pkill -f telegram-desktop && nohup telegram-desktop &> /dev/null & 
}

main() {
  prepare && create_palette && printf '%b\n' "\\e[1;31m::\\e[0m \\e[1;37mPalette generated succesfully.\\e[0m"
}

main
